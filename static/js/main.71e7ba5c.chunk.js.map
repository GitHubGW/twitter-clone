{"version":3,"sources":["firebaseConfiguration.js","components/Tweet.js","components/TweetForm.js","routes/Home.js","routes/Profile.js","routes/Authentication.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","authService","auth","firestoreService","firestore","storageService","storage","Tweet","tweetObject","isOwner","useState","isEditing","setIsEditing","content","editingTweet","setEditingTweet","FIRESTORE_COLLECTION","onSubmit","event","a","preventDefault","collection","doc","documentId","update","onDeleteTweet","window","confirm","delete","fileDownloadUrl","refFromURL","type","placeholder","value","onChange","target","onClick","style","width","height","src","alt","createdAtDate","TweetForm","userObject","tweet","setTweet","fileDataUrl","setFileDataUrl","fileName","setFileName","fileImageInput","useRef","textInput","currentUserObject","currentUser","fileReference","ref","child","email","putString","uploadTask","getDownloadURL","add","uid","displayName","emailVerified","photoURL","creationTime","metadata","lastSignInTime","b","createdAtTime","Date","now","toLocaleDateString","current","maxLength","required","accept","uploadFile","files","uploadFileName","name","fileReader","FileReader","undefined","console","log","readAsDataURL","onload","result","Home","allTweets","setAllTweets","allTweetsLength","setAllTweetsLength","useEffect","orderBy","onSnapshot","querySnapshot","querySnapshotSize","size","queryDocumentSnapshotObjectArray","docs","map","queryDocumentSnapshot","id","data","Profile","refreshDisplayName","history","useHistory","newDisplayName","setNewDisplayName","onClickLogOut","signOut","push","getMyTweets","where","get","updateProfile","Authentication","setEmail","password","setPassword","isAccount","error","setError","signInWithEmailAndPassword","data1","message","onClickRegister","createUserWithEmailAndPassword","data2","onClickSocialLogin","googleProvider","GoogleAuthProvider","signInWithPopup","githubProvider","GithubAuthProvider","Navigation","to","Router","isLoggedIn","exact","path","from","App","initializeFirebase","setInitializeFirebase","setIsLoggedIn","setUserObject","onAuthStateChanged","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAiBAA,IAASC,cAXc,CACrBC,OAAQC,0CACRC,WAAYD,mCACZE,UAAWF,mBACXG,cAAeH,+BACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iBAMV,IAAMO,EAAcV,IACdW,EAAcX,IAASY,OACvBC,EAAmBb,IAASc,YAC5BC,EAAiBf,IAASgB,U,sDCgExBC,EAlFD,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAG5B,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAASF,EAAYK,SAA7D,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAuB,SAEvBC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACfD,EAAME,iBADS,SAGTjB,EAAiBkB,WAAWL,GAAsBM,IAAlD,UAAyDd,EAAYe,aAAcC,OAAO,CAC9FX,QAASC,IAJI,OAMfF,GAAa,GANE,2CAAH,sDAsBRa,EAAa,uCAAG,sBAAAN,EAAA,0DACOO,OAAOC,QAAQ,wEADtB,gCAKZxB,EAAiBkB,WAAWL,GAAsBM,IAAlD,UAAyDd,EAAYe,aAAcK,SALvE,WAOdpB,EAAYqB,gBAPE,gCAQVxB,EAAeyB,WAAWtB,EAAYqB,iBAAiBD,SAR7C,2CAAH,qDAkBnB,OACE,8BACGjB,EACC,mCACGF,GACC,qCACE,uBAAMQ,SAAUA,EAAhB,UACE,uBAAOc,KAAK,OAAOC,YAAY,4BAAQC,MAAOnB,EAAcoB,SArCzD,SAAChB,GAChB,IACYe,EACRf,EADFiB,OAAUF,MAEZlB,EAAgBkB,MAkCJ,uBAAOF,KAAK,SAASE,MAAM,gCAE7B,wBAAQG,QAfE,WACpBrB,EAAgBD,GAChBF,GAAa,IAaH,+BAKN,qCACGJ,EAAYqB,iBAAmB,qBAAKQ,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAWC,IAAKhC,EAAYqB,gBAAiBY,IAAKjC,EAAYK,UACpI,6BAAKL,EAAYK,UACjB,6BAAKL,EAAYkC,gBAChBjC,GACC,qCACE,wBAAQ2B,QA5CA,WAClBxB,GAAa,GACbG,EAAgBP,EAAYK,UA0ClB,uCACA,wBAAQuB,QAASX,EAAjB,gDCyBCkB,EA/FG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAEnB,EAA0BlC,mBAAS,IAAnC,mBAAOmC,EAAP,KAAcC,EAAd,KACA,EAAsCpC,mBAAS,IAA/C,mBAAOqC,EAAP,KAAoBC,EAApB,KACA,EAAgCtC,mBAAS,IAAzC,mBAAOuC,EAAP,KAAiBC,EAAjB,KACMC,EAAiBC,mBACjBC,EAAYD,mBAEZnC,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACfD,EAAME,iBAEFS,EAAkB,GAChByB,EAAoBrD,EAAYsD,YAElB,KAAhBR,EANW,wBAQPS,EAAgBnD,EAAeoD,MAAMC,MAArB,UAA8Bd,EAAWe,MAAzC,YAAkDV,IAR3D,SAWYO,EAAcI,UAAUb,EAAa,YAXjD,cAWPc,EAXO,iBAcWA,EAAWJ,IAAIK,iBAd1B,QAcbjC,EAda,gCAiBT1B,EAAiBkB,WAxBI,UAwB6B0C,IAAI,CAC1DC,IAAKV,EAAkBU,IACvBC,YAAaX,EAAkBW,YAC/BN,MAAOL,EAAkBK,MACzBO,cAAeZ,EAAkBY,cACjCC,SAAUb,EAAkBa,SAC5BC,aAAcd,EAAkBe,SAASlD,EACzCmD,eAAgBhB,EAAkBe,SAASE,EAC3C1D,QAASgC,EACT2B,cAAeC,KAAKC,MACpBhC,eAAe,IAAI+B,MAAOE,qBAC1B9C,oBA5Ba,QA+BfsB,EAAeyB,QAAQ3C,MAAQ,GAC/Ba,EAAS,IACTE,EAAe,IAjCA,4CAAH,sDAsEd,OACE,mCACE,uBAAM/B,SAAUA,EAAhB,UACE,uBAAOc,KAAK,OAAOC,YAAY,4BAAQC,MAAOY,EAAOX,SArC1C,SAAChB,GAChB,IACYe,EACRf,EADFiB,OAAUF,MAEZa,EAASb,IAiCoE4C,UAAW,IAAKpB,IAAKJ,EAAWyB,UAAQ,IACjH,uBAAO/C,KAAK,OAAOgD,OAAO,UAAU7C,SA/BrB,SAAChB,GACpB,IAGM8D,EADF9D,EADFiB,OAAU8C,MAEa,GACnBC,EAAc,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAYG,KAC7BC,EAAa,IAAIC,WAEnBD,QAA6BE,IAAfN,GAA2C,OAAfA,IAC5CO,QAAQC,IAAI,KAAMR,GAClBI,EAAWK,cAAcT,GACzBI,EAAWM,OAAS,SAACxE,GACnB,IACYyE,EACRzE,EADFiB,OAAUwD,OAEZ3C,EAAe2C,IAEjBzC,EAAY,GAAD,OAAIgC,EAAJ,YAAsBT,KAAKC,UAcwBjB,IAAKN,IACjE,uBAAOpB,KAAK,SAASE,MAAM,8BAC1Bc,GACC,gCACE,qBAAKP,IAAKO,EAAaN,IAAI,GAAGJ,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAC/D,wBAAQH,QAfI,WACpBY,EAAe,IACfF,EAAS,IACTK,EAAeyB,QAAQ3C,MAAQ,IAYvB,mCC7CG2D,EAxCF,SAAC,GAAoB,IAAlBhD,EAAiB,EAAjBA,WACd2C,QAAQC,IAAI,kBAAmB5C,GAE/B,IACA,EAAkClC,mBAAS,IAA3C,mBAAOmF,EAAP,KAAkBC,EAAlB,KACA,EAA8CpF,mBAAS,GAAvD,mBAAOqF,EAAP,KAAwBC,EAAxB,KAoBA,OAlBAC,qBAAU,WACR9F,EACGkB,WANwB,UAOxB6E,QAAQ,gBAAiB,QACzBC,YAAW,SAACC,GACX,IAAMC,EAAoBD,EAAcE,KACxCN,EAAmBK,GAGnB,IAAME,EAAmCH,EAAcI,KAAKC,KAAI,SAACC,GAAD,oBAC9DnF,WAAYmF,EAAsBC,IAC/BD,EAAsBE,WAG3Bd,EAAaS,QAEhB,IAGD,qCACE,sCACA,cAAC,EAAD,CAAW3D,WAAYA,IACvB,0EAAemD,KACf,8BACGF,GACCA,EAAUY,KAAI,SAACjG,GACb,OAAO,cAAC,EAAD,CAA4BA,YAAaA,EAAaC,QAASmC,EAAWoB,MAAQxD,EAAYwD,KAAlFxD,EAAYmG,aC+B5BE,EAjEC,SAAC,GAAwC,IAAtCjE,EAAqC,EAArCA,WAAYkE,EAAyB,EAAzBA,mBAC7BvB,QAAQC,IAAI,qBAAsB5C,GAElC,IACMmE,EAAUC,cAChB,EAA4CtG,mBAASkC,EAAWqB,aAAhE,mBAAOgD,EAAP,KAAuBC,EAAvB,KAEMC,EAAa,uCAAG,sBAAAhG,EAAA,0DACAlB,EAAYsD,YADZ,gCAIZtD,EAAYmH,UAJA,OAKlBL,EAAQM,KAAK,KALK,2CAAH,qDASbC,EAAW,uCAAG,sBAAAnG,EAAA,sEACGhB,EAAiBkB,WAdX,UAc4CkG,MAAM,MAAO,KAAM3E,EAAWoB,KAAKkC,QAAQ,gBAAiB,QAAQsB,MADzH,cAQXhB,KAAKC,KAAI,SAACnF,GAAD,OAASiE,QAAQC,IAAI,kBAAmBlE,EAAIsF,WAR1C,2CAAH,qDAWX3F,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACfD,EAAME,iBAEFwB,EAAWqB,cAAgBgD,EAHhB,iEAOPrE,EAAW6E,cAAc,CAC7BxD,YAAagD,IARF,OAUbH,IACAI,EAAkB,IAXL,2CAAH,sDA0Bd,OAJAjB,qBAAU,WACRqB,MACC,IAGD,qCACE,yCACA,uBAAMrG,SAAUA,EAAhB,UACE,uBAAOc,KAAK,OAAOC,YAAY,kCAASE,SAf7B,SAAChB,GAChB,IACYe,EACRf,EADFiB,OAAUF,MAEZiF,EAAkBjF,IAW8CA,MAAOgF,IACnE,uBAAOlF,KAAK,SAASE,MAAM,mDAE7B,wBAAQG,QAAS+E,EAAjB,0CC2BSO,EAxFQ,WACrB,MAA0BhH,mBAAS,IAAnC,mBAAOiD,EAAP,KAAcgE,EAAd,KACA,EAAgCjH,mBAAS,IAAzC,mBAAOkH,EAAP,KAAiBC,EAAjB,KACA,EAAkCnH,oBAAS,GAA3C,mBAAOoH,EAAP,KACA,GADA,KAC0BpH,mBAAS,OAAnC,mBAAOqH,EAAP,KAAcC,EAAd,KAEM/G,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACfD,EAAME,iBACNmE,QAAQC,IAAI,MAAOvF,EAAYsD,aAFhB,kBAKOtD,EAAYgI,2BAA2BtE,EAAOiE,GALrD,OAKPM,EALO,OAMb3C,QAAQC,IAAI,QAAS0C,GANR,gDAQb3C,QAAQC,IAAR,MACAwC,EAAS,KAAMG,SATF,yDAAH,sDAaRjG,EAAW,SAAChB,GAChB,MAEIA,EADFiB,OAAUgD,EADZ,EACYA,KAAMlD,EADlB,EACkBA,MAGL,eAATkD,EACFwC,EAAS1F,GACS,kBAATkD,GACT0C,EAAY5F,IAIVmG,EAAe,uCAAG,4BAAAjH,EAAA,kEAEf2G,EAFe,gCAGE7H,EAAYoI,+BAA+B1E,EAAOiE,GAHpD,OAGZU,EAHY,OAIlB/C,QAAQC,IAAI,QAAS8C,GAJH,uDAOpB/C,QAAQC,IAAR,MACAwC,EAAS,KAAMG,SARK,yDAAH,qDAYfI,EAAkB,uCAAG,WAAOrH,GAAP,mBAAAC,EAAA,yDAKZ,iBAHDgE,EACRjE,EADFiB,OAAUgD,MAFa,iCAOfqD,EAAiB,IAAIxI,EAAYE,KAAKuI,mBAPvB,SAQfxI,EAAYyI,gBAAgBF,GARb,uDAUrBjD,QAAQC,IAAR,MACAwC,EAAS,KAAMG,SAXM,mCAaL,gBAAThD,EAbc,kCAefwD,EAAiB,IAAI3I,EAAYE,KAAK0I,mBAfvB,UAgBf3I,EAAYyI,gBAAgBC,GAhBb,2DAkBrBpD,QAAQC,IAAR,MACAwC,EAAS,KAAMG,SAnBM,iEAAH,sDAwBxB,OACE,gCACE,uBAAMlH,SAAUA,EAAhB,UACE,uBAAOkE,KAAK,aAAapD,KAAK,OAAOC,YAAY,qBAAME,SAAUA,EAAUD,MAAO0B,EAAOmB,UAAQ,IACjG,uBAAOK,KAAK,gBAAgBpD,KAAK,WAAWC,YAAY,2BAAOE,SAAUA,EAAUD,MAAO2F,EAAU9C,UAAQ,IAC5G,uBAAO/C,KAAK,SAASK,QAASnB,EAAUgB,MAAM,0BAEhD,gCACE,wBAAQG,QAASgG,EAAjB,sCACA,wBAAQjD,KAAK,cAAc/C,QAASmG,EAApC,6CAGA,wBAAQpD,KAAK,cAAc/C,QAASmG,EAApC,mDAGA,+BAAOR,GAASA,WClETc,EAjBI,SAAC,GAAoB,IAAlBjG,EAAiB,EAAjBA,WAGpB,OAFA2C,QAAQC,IAAI,kBAAmB5C,GAG7B,mCACE,+BACE,6BACE,cAAC,IAAD,CAAMkG,GAAG,IAAT,sBAEF,6BACE,eAAC,IAAD,CAAMA,GAAG,WAAT,UAAqBlG,GAAcA,EAAWqB,YAAcrB,EAAWqB,YAAc,eAArF,uCCqBK8E,EA1BA,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYpG,EAAqC,EAArCA,WAAYkE,EAAyB,EAAzBA,mBACxC,OACE,eAAC,IAAD,WACGkC,GAAc,cAAC,EAAD,CAAYpG,WAAYA,IACtCoG,EACC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMtG,WAAYA,MAEpB,cAAC,IAAD,CAAOqG,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,CAAStG,WAAYA,EAAYkE,mBAAoBA,MAEvD,cAAC,IAAD,CAAUqC,KAAK,IAAIL,GAAG,SAGxB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAUC,KAAK,IAAIL,GAAG,aCkCjBM,EAxDH,WACV,MAAoD1I,oBAAS,GAA7D,mBAAO2I,EAAP,KAA2BC,EAA3B,KACA,EAAoC5I,oBAAS,GAA7C,mBAAOsI,EAAP,KAAmBO,EAAnB,KACA,EAAoC7I,mBAAS,MAA7C,mBAAOkC,EAAP,KAAmB4G,EAAnB,KACAjE,QAAQC,IAAI,KAAMvF,EAAYsD,aAC9BgC,QAAQC,IAAI,KAAM5C,GAgDlB,OA7BAqD,qBAAU,WACRhG,EAAYwJ,oBAAmB,SAAC7G,GAC9B2C,QAAQC,IAAI,0BAA2B5C,GAEnCA,GAC6B,OAA3BA,EAAWqB,aACbrB,EAAW6E,cAAc,CACvBxD,YAAa,iBAGjBsF,GAAc,GACdC,EAAc,CACZxF,IAAKpB,EAAWoB,IAChBC,YAAarB,EAAWqB,YACxBN,MAAOf,EAAWe,MAClBO,cAAetB,EAAWsB,cAC1BC,SAAUvB,EAAWuB,SACrBC,aAAcxB,EAAWyB,SAASlD,EAClCmD,eAAgB1B,EAAWyB,SAASE,EACpCkD,cAAe,SAACxD,GAAD,OAAiBrB,EAAW6E,cAAcxD,QAG3DsF,GAAc,GACdC,EAAc,OAEhBF,GAAsB,QAEvB,IAEI,8BAAMD,EAAqB,cAAC,EAAD,CAAQL,WAAYA,EAAYpG,WAAYA,EAAYkE,mBA7C/D,WACzBvB,QAAQC,IAAI,KAAM5C,GAClB,IAAMU,EAAoBrD,EAAYsD,YAEtCiG,EAAc,CACZxF,IAAKV,EAAkBU,IACvBC,YAAaX,EAAkBW,YAC/BN,MAAOL,EAAkBK,MACzBO,cAAeZ,EAAkBY,cACjCC,SAAUb,EAAkBa,SAC5BC,aAAcd,EAAkBe,SAASlD,EACzCmD,eAAgBhB,EAAkBe,SAASE,EAC3CkD,cAAe,SAACxD,GAAD,OAAiBX,EAAkBmE,cAAcxD,SAiCmE,gBCrDzIyF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.71e7ba5c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\n// Firebase Configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseApp = firebase; // firebase\nexport const authService = firebase.auth(); // Authentication\nexport const firestoreService = firebase.firestore(); // Firestore Database\nexport const storageService = firebase.storage(); // Storage\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { firestoreService, storageService } from \"firebaseConfiguration\";\n\nconst Tweet = ({ tweetObject, isOwner }) => {\n  // console.log(\"Tweet.js tweetObject\", tweetObject);\n\n  const [isEditing, setIsEditing] = useState(false); // 트윗을 현재 수정중인지 여부 체크\n  const [editingTweet, setEditingTweet] = useState(tweetObject.content); // 수정 중인 트윗 내용을 가져옴\n  const FIRESTORE_COLLECTION = \"tweets\";\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    await firestoreService.collection(FIRESTORE_COLLECTION).doc(`${tweetObject.documentId}`).update({\n      content: editingTweet,\n    });\n    setIsEditing(false);\n    // setEditingTweet(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setEditingTweet(value);\n  };\n\n  const onEditTweet = () => {\n    setIsEditing(true);\n    setEditingTweet(tweetObject.content);\n  };\n\n  const onDeleteTweet = async () => {\n    const booleanDeleteTweet = window.confirm(\"트윗을 삭제하시겠습니까?\");\n\n    if (booleanDeleteTweet) {\n      // await firestoreService.doc(`${FIRESTORE_COLLECTION}/${tweetObject.documentId}`).delete();\n      await firestoreService.collection(FIRESTORE_COLLECTION).doc(`${tweetObject.documentId}`).delete(); // Cloud Firestore(DB)에서 트윗 삭제\n\n      if (tweetObject.fileDownloadUrl) {\n        await storageService.refFromURL(tweetObject.fileDownloadUrl).delete(); // Storage에서 파일 삭제\n      }\n    }\n  };\n\n  const onCancelTweet = () => {\n    setEditingTweet(editingTweet);\n    setIsEditing(false);\n  };\n\n  return (\n    <div>\n      {isEditing ? (\n        <>\n          {isOwner && (\n            <>\n              <form onSubmit={onSubmit}>\n                <input type=\"text\" placeholder=\"트윗 수정\" value={editingTweet} onChange={onChange}></input>\n                <input type=\"submit\" value=\"업데이트\"></input>\n              </form>\n              <button onClick={onCancelTweet}>취소</button>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          {tweetObject.fileDownloadUrl && <img style={{ width: \"250px\", height: \"200px\" }} src={tweetObject.fileDownloadUrl} alt={tweetObject.content} />}\n          <h3>{tweetObject.content}</h3>\n          <h4>{tweetObject.createdAtDate}</h4>\n          {isOwner && (\n            <>\n              <button onClick={onEditTweet}>트윗 수정</button>\n              <button onClick={onDeleteTweet}>트윗 삭제</button>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nTweet.propTypes = {\n  isOwner: PropTypes.bool.isRequired,\n};\n\nexport default Tweet;\n","import { useRef, useState } from \"react\";\nimport { authService, firestoreService, storageService } from \"firebaseConfiguration\";\n\nconst TweetForm = ({ userObject }) => {\n  const FIRESTORE_COLLECTION = \"tweets\";\n  const [tweet, setTweet] = useState(\"\");\n  const [fileDataUrl, setFileDataUrl] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const fileImageInput = useRef();\n  const textInput = useRef();\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    let fileDownloadUrl = \"\";\n    const currentUserObject = authService.currentUser;\n\n    if (fileDataUrl !== \"\") {\n      // 1. 파일이 업로드되서 저장될 버킷 내부의 래퍼런스 경로를 생성\n      const fileReference = storageService.ref().child(`${userObject.email}/${fileName}`);\n\n      // 2. 파일 데이터를 버킷 내부의 래퍼런스 경로로 전달 (파일을 버킷에 업로드)\n      const uploadTask = await fileReference.putString(fileDataUrl, \"data_url\");\n\n      // 3. 버킷 내부의 래퍼런스에 있는 파일에 대한 DownloadURL을 받음\n      fileDownloadUrl = await uploadTask.ref.getDownloadURL();\n    }\n\n    await firestoreService.collection(FIRESTORE_COLLECTION).add({\n      uid: currentUserObject.uid,\n      displayName: currentUserObject.displayName,\n      email: currentUserObject.email,\n      emailVerified: currentUserObject.emailVerified,\n      photoURL: currentUserObject.photoURL,\n      creationTime: currentUserObject.metadata.a,\n      lastSignInTime: currentUserObject.metadata.b,\n      content: tweet,\n      createdAtTime: Date.now(),\n      createdAtDate: new Date().toLocaleDateString(),\n      fileDownloadUrl,\n    });\n\n    fileImageInput.current.value = \"\";\n    setTweet(\"\");\n    setFileDataUrl(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setTweet(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const uploadFile = files[0];\n    const uploadFileName = uploadFile?.name;\n    const fileReader = new FileReader();\n\n    if (fileReader && uploadFile !== undefined && uploadFile !== null) {\n      console.log(\"zz\", uploadFile);\n      fileReader.readAsDataURL(uploadFile);\n      fileReader.onload = (event) => {\n        const {\n          target: { result },\n        } = event;\n        setFileDataUrl(result);\n      };\n      setFileName(`${uploadFileName}_${Date.now()}`);\n    }\n  };\n\n  const onCancelClick = () => {\n    setFileDataUrl(\"\");\n    setTweet(\"\");\n    fileImageInput.current.value = \"\";\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" placeholder=\"트윗 입력\" value={tweet} onChange={onChange} maxLength={100} ref={textInput} required />\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} ref={fileImageInput} />\n        <input type=\"submit\" value=\"트윗 작성\" />\n        {fileDataUrl && (\n          <div>\n            <img src={fileDataUrl} alt=\"\" style={{ width: \"300px\", height: \"250px\" }}></img>\n            <button onClick={onCancelClick}>취소</button>\n          </div>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default TweetForm;\n","import { useEffect, useState } from \"react\";\nimport { firestoreService } from \"firebaseConfiguration\";\nimport Tweet from \"components/Tweet\";\nimport TweetForm from \"components/TweetForm\";\n\nconst Home = ({ userObject }) => {\n  console.log(\"Home userObject\", userObject);\n\n  const FIRESTORE_COLLECTION = \"tweets\";\n  const [allTweets, setAllTweets] = useState(\"\");\n  const [allTweetsLength, setAllTweetsLength] = useState(0);\n\n  useEffect(() => {\n    firestoreService\n      .collection(FIRESTORE_COLLECTION)\n      .orderBy(\"createdAtTime\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const querySnapshotSize = querySnapshot.size;\n        setAllTweetsLength(querySnapshotSize);\n\n        // 전체 트윗 가져오기 (map사용)\n        const queryDocumentSnapshotObjectArray = querySnapshot.docs.map((queryDocumentSnapshot) => ({\n          documentId: queryDocumentSnapshot.id,\n          ...queryDocumentSnapshot.data(),\n        }));\n\n        setAllTweets(queryDocumentSnapshotObjectArray);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1>Home</h1>\n      <TweetForm userObject={userObject}></TweetForm>\n      <h1>전체 트윗 갯수: {allTweetsLength}</h1>\n      <div>\n        {allTweets &&\n          allTweets.map((tweetObject) => {\n            return <Tweet key={tweetObject.id} tweetObject={tweetObject} isOwner={userObject.uid === tweetObject.uid ? true : false} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import { useHistory } from \"react-router-dom\";\nimport { authService, firestoreService } from \"firebaseConfiguration\";\nimport { useEffect, useState } from \"react\";\n\nconst Profile = ({ userObject, refreshDisplayName }) => {\n  console.log(\"Profile userObject\", userObject);\n\n  const FIRESTORE_COLLECTION = \"tweets\";\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObject.displayName);\n\n  const onClickLogOut = async () => {\n    const currentUser = authService.currentUser;\n\n    if (currentUser) {\n      await authService.signOut();\n      history.push(\"/\");\n    }\n  };\n\n  const getMyTweets = async () => {\n    const tweets = await firestoreService.collection(FIRESTORE_COLLECTION).where(\"uid\", \"==\", userObject.uid).orderBy(\"createdAtTime\", \"desc\").get();\n    // Document에서 특정한 필드의 데이터만 가져오기\n    // tweets.docs.map((doc)=>doc.get(\"content\"))\n\n    // Document에서 모든 필드의 데이터 가져오기\n    // tweets.docs.map((doc)=>doc.data())\n\n    tweets.docs.map((doc) => console.log(\"getMyTweets doc\", doc.data()));\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    if (userObject.displayName === newDisplayName) {\n      return;\n    } else {\n      // firebase.User = userObject\n      await userObject.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshDisplayName();\n      setNewDisplayName(\"\");\n    }\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n\n  useEffect(() => {\n    getMyTweets();\n  }, []);\n\n  return (\n    <>\n      <h1>Profile</h1>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" placeholder=\"유저 닉네임\" onChange={onChange} value={newDisplayName}></input>\n        <input type=\"submit\" value=\"프로필 업데이트\"></input>\n      </form>\n      <button onClick={onClickLogOut}>로그아웃</button>\n    </>\n  );\n};\n\nexport default Profile;\n","import { useState } from \"react\";\nimport { firebaseApp, authService } from \"firebaseConfiguration\";\n\nconst Authentication = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isAccount, setIsAccount] = useState(false); // 계정 존재 여부 체크 (true: 계정있음, false: 계정없음)\n  const [error, setError] = useState(null);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    console.log(\"xxx\", authService.currentUser);\n\n    try {\n      const data1 = await authService.signInWithEmailAndPassword(email, password); // 로그인\n      console.log(\"data1\", data1);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n\n    if (name === \"emailInput\") {\n      setEmail(value);\n    } else if (name === \"passwordInput\") {\n      setPassword(value);\n    }\n  };\n\n  const onClickRegister = async () => {\n    try {\n      if (!isAccount) {\n        const data2 = await authService.createUserWithEmailAndPassword(email, password); // 계정 생성\n        console.log(\"data2\", data2);\n      }\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n  };\n\n  const onClickSocialLogin = async (event) => {\n    const {\n      target: { name },\n    } = event;\n\n    if (name === \"googleLogin\") {\n      try {\n        const googleProvider = new firebaseApp.auth.GoogleAuthProvider();\n        await authService.signInWithPopup(googleProvider);\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      }\n    } else if (name === \"githubLogin\") {\n      try {\n        const githubProvider = new firebaseApp.auth.GithubAuthProvider();\n        await authService.signInWithPopup(githubProvider);\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input name=\"emailInput\" type=\"text\" placeholder=\"이메일\" onChange={onChange} value={email} required></input>\n        <input name=\"passwordInput\" type=\"password\" placeholder=\"비밀번호\" onChange={onChange} value={password} required></input>\n        <input type=\"submit\" onClick={onSubmit} value=\"로그인\"></input>\n      </form>\n      <div>\n        <button onClick={onClickRegister}>회원가입</button>\n        <button name=\"googleLogin\" onClick={onClickSocialLogin}>\n          구글 로그인\n        </button>\n        <button name=\"githubLogin\" onClick={onClickSocialLogin}>\n          깃허브 로그인\n        </button>\n        <span>{error && error}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Authentication;\n","import { Link } from \"react-router-dom\";\n\nconst Navigation = ({ userObject }) => {\n  console.log(\"Navi userObject\", userObject);\n\n  return (\n    <>\n      <ul>\n        <li>\n          <Link to=\"/\">홈</Link>\n        </li>\n        <li>\n          <Link to=\"/profile\">{userObject && userObject.displayName ? userObject.displayName : \"유저\"}의 프로필</Link>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Authentication from \"routes/Authentication\";\nimport Navigation from \"components/Navigation\";\n\nconst Router = ({ isLoggedIn, userObject, refreshDisplayName }) => {\n  return (\n    <HashRouter>\n      {isLoggedIn && <Navigation userObject={userObject} />}\n      {isLoggedIn ? (\n        <Switch>\n          <Route exact path=\"/\">\n            <Home userObject={userObject} />\n          </Route>\n          <Route exact path=\"/profile\">\n            <Profile userObject={userObject} refreshDisplayName={refreshDisplayName} />\n          </Route>\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      ) : (\n        <Switch>\n          <Route exact path=\"/\">\n            <Authentication />\n          </Route>\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      )}\n    </HashRouter>\n  );\n};\n\nexport default Router;\n","import { useEffect, useState } from \"react\";\nimport { authService } from \"firebaseConfiguration\";\nimport Router from \"components/Router\";\n\nconst App = () => {\n  const [initializeFirebase, setInitializeFirebase] = useState(false); // 파이어베이스 초기화 체크\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // 로그인 여부 체크\n  const [userObject, setUserObject] = useState(null); // 로그인한 사용자 체크\n  console.log(\"44\", authService.currentUser);\n  console.log(\"55\", userObject);\n\n  // 프로필 이름 변경시 리액트를 리랜더링 시켜주는 함수\n  const refreshDisplayName = () => {\n    console.log(\"4a\", userObject);\n    const currentUserObject = authService.currentUser;\n\n    setUserObject({\n      uid: currentUserObject.uid,\n      displayName: currentUserObject.displayName,\n      email: currentUserObject.email,\n      emailVerified: currentUserObject.emailVerified,\n      photoURL: currentUserObject.photoURL,\n      creationTime: currentUserObject.metadata.a,\n      lastSignInTime: currentUserObject.metadata.b,\n      updateProfile: (displayName) => currentUserObject.updateProfile(displayName),\n    });\n  };\n\n  useEffect(() => {\n    authService.onAuthStateChanged((userObject) => {\n      console.log(\"onAuthStateChanged User\", userObject);\n\n      if (userObject) {\n        if (userObject.displayName === null) {\n          userObject.updateProfile({\n            displayName: \"유저\",\n          });\n        }\n        setIsLoggedIn(true);\n        setUserObject({\n          uid: userObject.uid,\n          displayName: userObject.displayName,\n          email: userObject.email,\n          emailVerified: userObject.emailVerified,\n          photoURL: userObject.photoURL,\n          creationTime: userObject.metadata.a,\n          lastSignInTime: userObject.metadata.b,\n          updateProfile: (displayName) => userObject.updateProfile(displayName),\n        });\n      } else {\n        setIsLoggedIn(false);\n        setUserObject(null);\n      }\n      setInitializeFirebase(true);\n    });\n  }, []);\n\n  return <div>{initializeFirebase ? <Router isLoggedIn={isLoggedIn} userObject={userObject} refreshDisplayName={refreshDisplayName} /> : \"Loading...\"}</div>;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}